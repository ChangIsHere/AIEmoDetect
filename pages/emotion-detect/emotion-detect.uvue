<template>
	<view class="container">
		<!-- 返回按钮 -->
		<view class="back-button" @tap="goBack">
			<text class="back-icon">←</text>
			<text class="back-text">返回</text>
		</view>
		
		<!-- 头部 -->
		<view class="header">
			<text class="title">情绪识别</text>
		</view>
		
		<!-- 主要内容区域 -->
		<view class="main-content">
			<!-- 检测步骤流程 -->
			<view class="progress-bar">
				<view class="progress-step" :class="{ active: step >= 1, completed: step > 1 }">
					<view class="step-circle">1</view>
					<text class="step-label">获取权限</text>
				</view>
				<view class="progress-line"></view>
				<view class="progress-step" :class="{ active: step >= 2, completed: step > 2 }">
					<view class="step-circle">2</view>
					<text class="step-label">视频录制</text>
				</view>
				<view class="progress-line"></view>
				<view class="progress-step" :class="{ active: step >= 3, completed: step > 3 }">
					<view class="step-circle">3</view>
					<text class="step-label">分析中</text>
				</view>
			</view>
			
			<!-- 权限获取步骤 -->
			<view v-if="step === 1" class="step-content permission-step">
				<image class="permission-icon" src="/static/permission.png"></image>
				<text class="step-title">需要获取权限</text>
				<text class="step-description">为了进行完整的情绪分析，我们需要获取麦克风和摄像头权限</text>
				<view class="button primary-button" @tap="requestPermissions">授权并继续</view>
			</view>
			
			<!-- 视频录制步骤 -->
			<view v-if="step === 2" class="step-content face-step">
				<!-- 摄像头预览区域 -->
				<view class="camera-container">
					<video v-if="!isRecordingVideo && tempVideoPath" id="videoCapture" class="video-preview" :src="tempVideoPath" controls></video>
					<camera v-else-if="!tempVideoPath" class="camera-preview" device-position="front" flash="off" @error="handleCameraError"></camera>
					<view class="face-outline"></view>
					<view v-if="isRecordingVideo" class="scan-line"></view>
				</view>
				
				<text class="step-title">视频录制</text>
				<text class="step-description">{{isRecordingVideo ? '正在录制中，请对着镜头讲述您的问题或情绪...' : (tempVideoPath ? '视频已录制完成，您可以预览或重新录制' : '点击下方按钮开始录制')}}</text>
				
				<!-- 倒计时区域 -->
				<view v-if="isRecordingVideo" class="countdown-container">
					<text class="countdown-text">{{countdownValue}}s</text>
					<view class="countdown-progress" :style="{width: countdownProgress + '%'}"></view>
				</view>
				
				<view v-if="!isRecordingVideo && !tempVideoPath" class="button primary-button" @tap="startVideoRecording">开始录制</view>
				<view v-if="!isRecordingVideo && tempVideoPath" class="button-group">
					<view class="button secondary-button" @tap="discardVideo">重录</view>
					<view class="button primary-button" @tap="submitVideo">提交分析</view>
				</view>
			</view>
			
			<!-- 分析中步骤 -->
			<view v-if="step === 3" class="step-content analyzing-step">
				<view class="analyzing-animation">
					<view class="pulse-circle"></view>
					<view class="pulse-circle delay-1"></view>
					<view class="pulse-circle delay-2"></view>
				</view>
				<text class="step-title">正在分析</text>
				<text class="step-description">我们正在处理您的情绪数据，马上完成...</text>
			</view>
		</view>
	</view>
</template>

<script>
import request from '../../utils/request.js'

export default {
	data() {
		return {
			step: 1, // 当前步骤：1-权限获取，2-视频录制，3-分析中
			isRecordingVideo: false, // 标记是否正在录制视频
			countdownValue: 15, // 倒计时秒数，默认为15秒视频录制
			countdownProgress: 100, // 倒计时进度条
			countdownInterval: null,
			cameraContext: null,
			hasPermissions: false,
			tempVideoPath: '', // 临时视频路径
			emotionData: null  // 情绪分析数据
		}
	},
	onReady() {
		// 初始化相机上下文
		this.cameraContext = uni.createCameraContext();
	},
	methods: {
		// 返回上一页
		goBack() {
			uni.navigateBack()
		},
		
		// 处理相机错误
		handleCameraError(err) {
			console.error('相机错误:', err)
			uni.showToast({
				title: '相机初始化失败，请检查权限',
				icon: 'none',
				duration: 2000
			})
		},
		
		// 请求麦克风和摄像头权限
		requestPermissions() {
			uni.showLoading({
				title: '请求权限中...'
			})
			
			// 请求麦克风权限
			uni.authorize({
				scope: 'scope.record',
				success: () => {
					// 请求摄像头权限
					uni.authorize({
						scope: 'scope.camera',
						success: () => {
							this.hasPermissions = true
							uni.hideLoading()
							uni.showToast({
								title: '授权成功',
								icon: 'success',
								duration: 1500
							})
							
							setTimeout(() => {
								this.step = 2
							}, 1500)
						},
						fail: () => {
							this.handlePermissionFailure()
						}
					})
				},
				fail: () => {
					this.handlePermissionFailure()
				}
			})
		},
		
		// 处理权限请求失败
		handlePermissionFailure() {
			uni.hideLoading()
			uni.showModal({
				title: '权限请求',
				content: '需要麦克风和摄像头权限才能进行情绪分析。请在设置中开启相关权限。',
				confirmText: '去设置',
				success: (res) => {
					if (res.confirm) {
						uni.openSetting()
					}
				}
			})
		},
		
		// 开始倒计时
		startCountdown(callback) {
			this.countdownValue = 15
			this.countdownProgress = 100
			
			// 清除可能存在的旧倒计时
			if (this.countdownInterval) {
				clearInterval(this.countdownInterval)
			}
			
			this.countdownInterval = setInterval(() => {
				this.countdownValue--
				this.countdownProgress = (this.countdownValue / 15) * 100
				
				if (this.countdownValue <= 0) {
					clearInterval(this.countdownInterval)
					callback()
				}
			}, 1000)
		},
		
		// 开始视频录制
		startVideoRecording() {
			if (!this.cameraContext) {
				uni.showToast({ title: '相机初始化失败', icon: 'none' })
				return
			}
			this.isRecordingVideo = true
			this.tempVideoPath = ''
			
			this.startCountdown(() => {
				this.stopVideoRecording()
			})
			
			this.cameraContext.startRecord({
				duration: 15, // 录制15秒
				compressed: true, // 启用压缩，减少文件大小
				success: (res) => {
					console.log('视频录制完成:', res.tempFilePath)
					this.tempVideoPath = res.tempFilePath
				},
				fail: (err) => {
					console.error('视频录制失败:', err)
					uni.showToast({ title: '视频录制失败', icon: 'none' })
					this.isRecordingVideo = false // 录制失败也停止状态
				}
			})

			// 监听录制停止事件（无论成功或失败）
			this.cameraContext.onStop((res) => {
				console.log('相机录制已停止', res)
				this.isRecordingVideo = false
				if (res.tempFilePath) {
					this.tempVideoPath = res.tempFilePath
				}
			})
		},
		
		// 停止视频录制
		stopVideoRecording() {
			clearInterval(this.countdownInterval)
			if (this.cameraContext) {
				this.cameraContext.stopRecord()
			}
		},
		
		// 放弃视频，重置状态以便重新录制
		discardVideo() {
			this.tempVideoPath = ''
			this.isRecordingVideo = false
			this.countdownValue = 15 // 重置倒计时
			this.countdownProgress = 100 // 重置进度条
			uni.showToast({ title: '已取消录制', icon: 'none' })
		},
		
		// 提交视频进行分析
		async submitVideo() {
			if (!this.tempVideoPath) {
				uni.showToast({ title: '请先录制视频', icon: 'none' })
				return
			}
			
			this.step = 3 // 进入分析中步骤
			uni.showLoading({
				title: '视频分析中...',
				mask: true
			})
			
      try {
        const resData = await request.analyzeEmotionFromVideo({
          filePath: this.tempVideoPath
        });
				
				uni.hideLoading()
        console.log('视频分析结果:', resData)
        this.emotionData = resData
        uni.showToast({ title: '分析完成', icon: 'success' })
        // 跳转到结果页
        setTimeout(() => {
          this.goToResultPage()
        }, 1000)
      } catch (err) {
				uni.hideLoading()
        console.error('视频上传或分析失败:', err)
        uni.showToast({
          title: '视频分析失败，请重试',
          icon: 'none',
          duration: 3000
        })
        // 失败后回到视频录制步骤，允许重试
        this.step = 2
      }
		},
		
		// 跳转到结果页
		goToResultPage() {
			if (this.emotionData) {
				uni.redirectTo({
					url: '/pages/emotion-result/emotion-result?data=' + encodeURIComponent(JSON.stringify(this.emotionData))
				})
			} else {
				uni.showToast({ title: '未获取到分析数据', icon: 'none' })
				// 如果没有数据，回到初始或录制页面
				this.step = 2
			}
		}
	}
}
</script>

<style>
.container {
	height: 100vh;
	background-color: #050410;
	background-image: linear-gradient(-45deg, #4f00bc, #7d1b7e, #0f0c29, #2a0845, #12c2e9);
	background-size: 400% 400%;
	animation: gradient-bg 12s ease infinite;
	padding: 60rpx 40rpx;
	box-sizing: border-box;
	position: relative;
}

@keyframes gradient-bg {
	0% { background-position: 0% 50%; }
	50% { background-position: 100% 50%; }
	100% { background-position: 0% 50%; }
}

.back-button {
	position: absolute;
	top: 60rpx;
	left: 30rpx;
	display: flex;
	align-items: center;
	padding: 10rpx;
	z-index: 10;
}

.back-icon {
	font-size: 36rpx;
	color: #ffffff;
	margin-right: 10rpx;
}

.back-text {
	font-size: 30rpx;
	color: #ffffff;
}

.header {
	margin-top: 40rpx;
	text-align: center;
}

.title {
	font-size: 48rpx;
	color: #ffffff;
	font-weight: bold;
}

.main-content {
	margin-top: 80rpx;
	display: flex;
	flex-direction: column;
	align-items: center;
	height: calc(100vh - 200rpx);
}

/* 进度条样式 */
.progress-bar {
	display: flex;
	justify-content: center;
	align-items: center;
	width: 90%;
	margin-bottom: 60rpx;
}

.progress-step {
	display: flex;
	flex-direction: column;
	align-items: center;
	width: 150rpx;
}

.step-circle {
	width: 60rpx;
	height: 60rpx;
	border-radius: 30rpx;
	background: rgba(255, 255, 255, 0.3);
	display: flex;
	justify-content: center;
	align-items: center;
	color: #ffffff;
	font-weight: bold;
	margin-bottom: 20rpx;
}

.progress-step.active .step-circle {
	background: #6847c2;
}

.progress-step.completed .step-circle {
	background: #32cd32;
}

.step-label {
	font-size: 26rpx;
	color: #ffffff;
}

.progress-line {
	flex: 1;
	height: 4rpx;
	background: rgba(255, 255, 255, 0.3);
	margin: 0 10rpx;
	margin-bottom: 20rpx;
}

/* 步骤内容样式 */
.step-content {
	width: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: 40rpx;
	box-sizing: border-box;
	animation: fade-in 0.3s ease;
}

@keyframes fade-in {
	from { opacity: 0; transform: translateY(20rpx); }
	to { opacity: 1; transform: translateY(0); }
}

.step-title {
	font-size: 40rpx;
	color: #ffffff;
	margin-bottom: 30rpx;
	text-align: center;
}

.step-description {
	font-size: 30rpx;
	color: rgba(255, 255, 255, 0.8);
	text-align: center;
	margin-bottom: 60rpx;
	line-height: 1.5;
}

.button {
	width: 350rpx;
	height: 90rpx;
	border-radius: 45rpx;
	display: flex;
	justify-content: center;
	align-items: center;
	font-size: 32rpx;
	margin-top: 40rpx;
}

.button-group {
	display: flex;
	justify-content: space-between;
	width: 100%;
	padding: 0 50rpx;
}

.primary-button {
	background: #6847c2;
	color: #ffffff;
	box-shadow: 0 8rpx 20rpx rgba(104, 71, 194, 0.4);
}

.secondary-button {
	background: rgba(255, 255, 255, 0.2);
	color: #ffffff;
	border: 1rpx solid rgba(255, 255, 255, 0.5);
}

.primary-button:active, .secondary-button:active {
	transform: scale(0.98);
	box-shadow: 0 4rpx 10rpx rgba(104, 71, 194, 0.4);
}

/* 权限步骤样式 */
.permission-icon {
	width: 180rpx;
	height: 180rpx;
	margin-bottom: 40rpx;
}

/* 视频录制步骤样式 */
.video-preview {
	width: 200rpx;
	height: 200rpx;
	margin-bottom: 40rpx;
}

/* 面部扫描步骤样式 */
.camera-container {
	width: 400rpx;
	height: 400rpx;
	position: relative;
	margin-bottom: 40rpx;
	overflow: hidden;
	border-radius: 200rpx;
}

.camera-preview {
	width: 100%;
	height: 100%;
}

.video-preview {
	width: 100%;
	height: 100%;
	object-fit: cover;
}

.face-outline {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	border: 4rpx dashed rgba(255, 255, 255, 0.8);
	border-radius: 50%;
	z-index: 5;
	pointer-events: none;
}

.scan-line {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 4rpx;
	background: rgba(104, 71, 194, 0.8);
	box-shadow: 0 0 10rpx #6847c2;
	animation: scan 2s ease-in-out infinite;
	z-index: 6;
	pointer-events: none;
}

@keyframes scan {
	0% { transform: translateY(0); }
	50% { transform: translateY(400rpx); }
	100% { transform: translateY(0); }
}

/* 倒计时样式 */
.countdown-container {
	width: 100%;
	height: 40rpx;
	background: rgba(255, 255, 255, 0.2);
	border-radius: 20rpx;
	margin: 20rpx 0;
	position: relative;
	overflow: hidden;
}

.countdown-progress {
	position: absolute;
	left: 0;
	top: 0;
	height: 100%;
	background: rgba(104, 71, 194, 0.8);
	border-radius: 20rpx;
	transition: width 1s linear;
}

.countdown-text {
	position: absolute;
	width: 100%;
	text-align: center;
	line-height: 40rpx;
	color: #ffffff;
	font-weight: bold;
	z-index: 1;
}

/* 分析中步骤样式 */
.analyzing-animation {
	width: 200rpx;
	height: 200rpx;
	position: relative;
	margin-bottom: 40rpx;
}

.pulse-circle {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	width: 100rpx;
	height: 100rpx;
	background: rgba(104, 71, 194, 0.2);
	border-radius: 50%;
	animation: pulse-out 2s infinite;
}

.pulse-circle.delay-1 {
	animation-delay: 0.5s;
}

.pulse-circle.delay-2 {
	animation-delay: 1s;
}

@keyframes pulse-out {
	0% {
		transform: translate(-50%, -50%) scale(0.8);
		opacity: 1;
	}
	100% {
		transform: translate(-50%, -50%) scale(2);
		opacity: 0;
	}
}
</style> 