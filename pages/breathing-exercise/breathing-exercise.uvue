<template>
  <view class="container">
    <view class="header">
      <text class="title">呼吸调节练习</text>
      <text class="subtitle">跟随节奏，深呼吸</text>
    </view>

    <view class="breathing-circle-wrapper">
      <view :class="['breathing-circle', { 'breathe-in': isBreathingIn, 'breathe-out': isBreathingOut }]">
        <text class="timer-text">{{ countdown }}</text>
      </view>
    </view>

    <view class="instruction-text animate-fade-in">
      <text>{{ instruction }}</text>
    </view>

    <view v-if="isRunning || completedSets > 0" class="progress-container animate-fade-in">
      <text class="progress-label">已完成: {{ completedSets }} / {{ totalSets }} 组</text>
      <view class="progress-bar-inner">
        <view class="progress-fill" :style="{ width: (completedSets / totalSets) * 100 + '%' }"></view>
      </view>
    </view>

    <view class="control-buttons">
      <button v-if="!isRunning && completedSets === 0" class="control-button start-button" @click="startBreathing">
        <uni-icons type="play-filled" size="24" color="#fff"></uni-icons>
        <text>开始练习</text>
      </button>
      <button v-else-if="isRunning" class="control-button stop-button" @click="stopBreathing">
        <uni-icons type="pause-filled" size="24" color="#fff"></uni-icons>
        <text>暂停</text>
      </button>
      <button v-else-if="completedSets > 0 && completedSets < totalSets" class="control-button start-button" @click="startBreathing">
        <uni-icons type="play-filled" size="24" color="#fff"></uni-icons>
        <text>继续练习</text>
      </button>
      <button v-else-if="completedSets === totalSets" class="control-button start-button" @click="resetExercise">
        <uni-icons type="redo" size="24" color="#fff"></uni-icons>
        <text>重新开始</text>
      </button>

      <button class="control-button exit-button" @click="exitExercise">
        <uni-icons type="undo-alt" size="24" color="#fff"></uni-icons>
        <text>退出</text>
      </button>
    </view>
  </view>
</template>

<script setup>
import { ref, onUnmounted } from 'vue';
import { onLoad } from '@dcloudio/uni-app';

const countdown = ref(0);
const instruction = ref('点击开始练习按钮');
const isRunning = ref(false);
const isBreathingIn = ref(false);
const isBreathingOut = ref(false);
const completedSets = ref(0);
const totalSets = ref(6);

let timer = null;
let interval = null;

const breathingPattern = [
  { action: '吸气', duration: 4 }, // 吸气4秒
  { action: '呼气', duration: 4 }  // 呼气4秒
];
let currentPatternIndex = 0;

onLoad(() => {
  console.log('Breathing Exercise Page: onLoad triggered.');
});

function startBreathing() {
  console.log('startBreathing button clicked');
  isRunning.value = true;
  executeBreathingStep();
}

function stopBreathing() {
  console.log('stopBreathing button clicked');
  isRunning.value = false;
  clearInterval(interval);
  clearTimeout(timer);
  countdown.value = 0; // Keep countdown at 0 or last value for display
  instruction.value = '练习已暂停';
  isBreathingIn.value = false;
  isBreathingOut.value = false;
}

function resetExercise() {
  console.log('resetExercise button clicked');
  stopBreathing();
  completedSets.value = 0;
  currentPatternIndex = 0;
  instruction.value = '点击开始练习按钮';
}

function exitExercise() {
  console.log('exitExercise button clicked. Attempting to redirect to pages/pages3/pages3');
  uni.redirectTo({
    url: '/pages/pages3/pages3'
  });
}

function executeBreathingStep() {
  if (!isRunning.value) {
    console.log('executeBreathingStep not running');
    return;
  }

  const step = breathingPattern[currentPatternIndex];
  instruction.value = step.action;
  countdown.value = step.duration;
  console.log(`Executing step: ${step.action}, duration: ${step.duration}, countdown: ${countdown.value}`);

  // 动画控制
  isBreathingIn.value = (step.action === '吸气');
  isBreathingOut.value = (step.action === '呼气');
  console.log(`isBreathingIn: ${isBreathingIn.value}, isBreathingOut: ${isBreathingOut.value}`);

  clearInterval(interval);
  interval = setInterval(() => {
    countdown.value--;
    console.log(`Countdown: ${countdown.value}`);
    if (countdown.value <= 0) {
      clearInterval(interval);
      // Move to next step or next set
      currentPatternIndex++;
      if (currentPatternIndex >= breathingPattern.length) {
        currentPatternIndex = 0; // Reset for next set
        completedSets.value++;
        console.log(`Completed sets: ${completedSets.value}`);
        if (completedSets.value >= totalSets.value) {
          console.log('All sets completed!');
          stopBreathing();
          instruction.value = '恭喜，所有练习已完成！';
          return; // Stop further execution
        }
      }
      timer = setTimeout(executeBreathingStep, 1000); // 间隔1秒后开始下一个步骤
    }
  }, 1000);
}

onUnmounted(() => {
  console.log('onUnmounted called, stopping breathing');
  stopBreathing();
});
</script>

<style scoped>
.container {
  min-height: 100vh;
  background-color: #03020d;
  background-image:
    radial-gradient(rgba(255, 255, 255, 0.03) 1px, transparent 0),
    linear-gradient(-45deg, #13022d, #3b0c60, #0c0c29, #2a0845, #09627c);
  background-size:
    4px 4px,
    400% 400%;
  animation: gradient-bg 15s ease infinite;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40rpx 30rpx;
  box-sizing: border-box;
  position: relative;
  overflow: hidden;
}

.container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background:
    radial-gradient(circle at 20% 30%, rgba(79, 0, 188, 0.4) 0%, transparent 70%),
    radial-gradient(circle at 80% 70%, rgba(18, 194, 233, 0.4) 0%, transparent 70%);
  animation: pulse-bg 15s ease-in-out infinite alternate;
  z-index: 0;
}

.particles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: 2;
}

.particle {
  position: absolute;
  width: 4rpx;
  height: 4rpx;
  background-color: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  animation: float-particle 15s linear infinite;
  box-shadow: 0 0 5rpx rgba(255, 255, 255, 0.8);
}

@keyframes gradient-bg {
  0% {
    background-position: 0% 50%;
  }

  50% {
    background-position: 100% 50%;
  }

  100% {
    background-position: 0% 50%;
  }
}

@keyframes pulse-bg {
  0% {
    opacity: 0.6;
    transform: scale(1);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.05);
  }
  100% {
    opacity: 0.6;
    transform: scale(1);
  }
}

.header {
  width: 100%;
  padding: 20rpx;
  margin-bottom: 80rpx;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  z-index: 1;
}

.title {
  color: white;
  font-size: 60rpx;
  font-weight: bold;
  text-align: center;
  text-shadow: 0 5rpx 10rpx rgba(0, 0, 0, 0.6);
  margin-bottom: 20rpx;
  letter-spacing: 3rpx;
}

.subtitle {
  color: #c0c0c0;
  font-size: 36rpx;
  text-align: center;
  text-shadow: 0 1rpx 4rpx rgba(0, 0, 0, 0.4);
}

.breathing-circle-wrapper {
  margin-top: 50rpx;
  width: 480rpx;
  height: 480rpx;
  background-color: rgba(255, 255, 255, 0.08);
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 0 80rpx rgba(79, 0, 188, 0.7);
  position: relative;
  z-index: 1;
  overflow: hidden;
  animation: pulse-wrapper 3s ease-in-out infinite alternate;
  border: 2rpx solid rgba(255, 255, 255, 0.2);
}

.breathing-circle {
  width: 380rpx;
  height: 380rpx;
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-size: 110rpx;
  font-weight: bold;
  transition: background-color 0.5s ease;
  transform: scale(1);
  box-shadow: inset 0 0 30rpx rgba(0, 0, 0, 0.3);
}

.breathing-circle.breathe-in {
  animation: breathe-in-anim 4s forwards;
  background-color: rgba(18, 194, 233, 0.7);
  box-shadow: inset 0 0 50rpx rgba(18, 194, 233, 0.5), 0 0 40rpx rgba(18, 194, 233, 0.9);
}

.breathing-circle.breathe-out {
  animation: breathe-out-anim 4s forwards; /* Changed to 4s to match exhale duration */
  background-color: rgba(255, 99, 71, 0.7);
  box-shadow: inset 0 0 50rpx rgba(255, 99, 71, 0.5), 0 0 40rpx rgba(255, 99, 71, 0.9);
}

.timer-text {
  font-size: 110rpx;
  font-weight: bold;
  text-shadow: 0 3rpx 6rpx rgba(0, 0, 0, 0.5);
}

.instruction-text {
  color: white;
  font-size: 44rpx;
  margin-top: 100rpx;
  text-shadow: 0 3rpx 8rpx rgba(0, 0, 0, 0.6);
  z-index: 1;
  text-align: center;
  font-weight: 600;
}

.progress-container {
  width: 80%;
  max-width: 600rpx;
  margin-top: 50rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
  z-index: 1;
}

.progress-label {
  color: #e0e0e0;
  font-size: 28rpx;
  margin-bottom: 10rpx;
}

.progress-bar-inner {
  width: 100%;
  height: 20rpx;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 10rpx;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background-color: #4CAF50; /* Green color for progress */
  border-radius: 10rpx;
  transition: width 0.3s ease-in-out;
}

.control-buttons {
  margin-top: 100rpx; /* Adjusted margin to accommodate progress bar */
  display: flex;
  gap: 60rpx;
  z-index: 1;
}

.control-button {
  background: linear-gradient(145deg, #5e00d9, #8c6fe8);
  color: white;
  padding: 30rpx 60rpx;
  border-radius: 30rpx;
  font-size: 36rpx;
  display: flex;
  align-items: center;
  gap: 20rpx;
  box-shadow: 0 10rpx 25rpx rgba(0, 0, 0, 0.5), inset 0 0 10rpx rgba(255, 255, 255, 0.2);
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  border: none;
  outline: none;
  cursor: pointer;
}

.control-button:active {
  transform: scale(0.95);
  box-shadow: 0 5rpx 15rpx rgba(0, 0, 0, 0.6), inset 0 0 5rpx rgba(0, 0, 0, 0.3);
  opacity: 0.9;
}

.control-button.stop-button {
  background: linear-gradient(145deg, #ffc107, #ffdd77);
}

.control-button.exit-button {
  background: linear-gradient(145deg, #a0a0a0, #cccccc);
}

/* Animations */
@keyframes breathe-in-anim {
  0% { transform: scale(1); box-shadow: inset 0 0 10rpx rgba(0, 0, 0, 0.2), 0 0 15rpx rgba(18, 194, 233, 0.5); }
  100% { transform: scale(1.25); box-shadow: inset 0 0 20rpx rgba(18, 194, 233, 0.5), 0 0 40rpx rgba(18, 194, 233, 0.9); }
}

@keyframes breathe-out-anim {
  0% { transform: scale(1.25); box-shadow: inset 0 0 20rpx rgba(255, 99, 71, 0.5), 0 0 40rpx rgba(255, 99, 71, 0.9); }
  100% { transform: scale(1); box-shadow: inset 0 0 10rpx rgba(0, 0, 0, 0.2), 0 0 15rpx rgba(255, 99, 71, 0.5); }
}

@keyframes fade-in {
  from { opacity: 0; transform: translateY(30rpx); }
  to { opacity: 1; transform: translateY(0); }
}
.animate-fade-in {
  animation: fade-in 0.8s ease-out forwards;
}

@keyframes pulse-wrapper {
  0% { transform: scale(1); box-shadow: 0 0 60rpx rgba(79, 0, 188, 0.6); }
  50% { transform: scale(1.03); box-shadow: 0 0 90rpx rgba(18, 194, 233, 0.8); }
  100% { transform: scale(1); box-shadow: 0 0 60rpx rgba(79, 0, 188, 0.6); }
}

@keyframes float-particle {
  0% {
    transform: translateY(100vh) translateX(0);
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    transform: translateY(-20vh) translateX(20vw);
    opacity: 0;
  }
}
</style>